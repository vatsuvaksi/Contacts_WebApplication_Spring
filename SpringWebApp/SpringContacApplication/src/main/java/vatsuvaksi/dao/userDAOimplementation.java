package vatsuvaksi.dao;
import java.util.HashMap;
import java.util.List;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import vatsuvaksi.domainClasses.user;
import vatsuvaksi.rowMapper.userRowMapper;

@Repository
public class userDAOimplementation extends BaseDAO implements UserDAO       //This is a child of baseDao class which in turn is a child of NamedParameterJDBCDaoSupport
{       
	//Also it implements UserDao so all the queries can be generated 
	public void save(user u) {
		// This method takes the input from the user and saves it all in the mysql server 
		String sqlquery= "INSERT INTO user(name,phone,email,address,LoginName,password,role,LoginStatus) VALUES (:name,:phone,:email,:address,:LoginName,:password,:role,:LoginStatus)";
		HashMap<String, Object> map=new HashMap<String, Object>();
		map.put("name", u.getName());
		map.put("phone", u.getPhone());
		map.put("email",u.getEmail());
		map.put("address",u.getAddress());
		map.put("LoginName",u.getLoginName());
		map.put("password",u.getPassword());
		map.put("role",u.getRole());
		map.put("LoginStatus",u.getLoginStatus());
		KeyHolder key=new GeneratedKeyHolder(); // This binds the value which is autoIncremented and generated by the Databases ;
	    SqlParameterSource mapping = new MapSqlParameterSource(map); // This maps the value of the string to the query where : is placed 
	    super.getNamedParameterJdbcTemplate().update(sqlquery, mapping, key);
	    Integer userId=key.getKey().intValue();
	    u.setUserID(userId);
	}
	public void update(user u) {
		// This updates the user 
		String sqlquery = "UPDATE user SET name= :name,phone = :phone,email= :email,address=:address,LoginName=:LoginName,password= :password,role= :role,LoginStatus=:LoginStatus WHERE userID=:userID";
		HashMap<String, Object> map=new HashMap<String, Object>();
		map.put("name", u.getName());
		map.put("phone", u.getPhone());
		map.put("email",u.getEmail());
		map.put("address",u.getAddress());
		map.put("LoginName",u.getLoginName());
		map.put("password",u.getPassword());
		map.put("role",u.getRole());
		map.put("LoginStatus",u.getLoginStatus());
		map.put("userID", u.getUserID());
		getNamedParameterJdbcTemplate().update(sqlquery, map);
	}
	public void delete(user u) {
		// TODO Auto-generated method stub
		int r=u.getUserID();
		deleteById(r);
	}
	public void deleteById(Integer userId) {
		// TODO Auto-generated method stub
		String sqlquery="DELETE FROM user WHERE userId=:userID";
		HashMap<String, Object> map=new HashMap<String, Object>();
		map.put("userID", userId);
		getNamedParameterJdbcTemplate().update(sqlquery,map);
	}
	public user findById(Integer userId) {
		
		String sqlquery="SELECT * FROM user WHERE userID=?";
		user u= getJdbcTemplate().queryForObject(sqlquery, new userRowMapper(),userId);
		return u;
	}

	public List<user> findByProperty(String propName, Object propValue) {
		
		//This methopd uses row mapper to implement 
		String sqlquery="SELECT * FROM user WHERE "+ propName+"=?";
		
		return getJdbcTemplate().query(sqlquery, new userRowMapper(), propValue);
		
	}
public List<user> findAll() {
	
	String sqlquery="SELECT * FROM user";
	List<user> user=getJdbcTemplate().query(sqlquery, new userRowMapper());
	return user;
}

}
